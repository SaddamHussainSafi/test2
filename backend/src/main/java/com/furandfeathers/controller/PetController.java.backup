package com.furandfeathers.controller;

import com.furandfeathers.entity.Pet;
import com.furandfeathers.entity.User;
import com.furandfeathers.repository.PetRepository;
import com.furandfeathers.repository.UserRepository;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.Principal;
import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/pets")
@CrossOrigin(origins = "http://localhost:3000")
public class PetController {

    private final PetRepository petRepository;
    private final UserRepository userRepository;

    public PetController(PetRepository petRepository, UserRepository userRepository) {
        this.petRepository = petRepository;
        this.userRepository = userRepository;
    }

    @PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    public ResponseEntity<?> addPet(
            @RequestPart("name") String name,
            @RequestPart("type") String type,
            @RequestPart("breed") String breed,
            @RequestPart("gender") String gender,
            @RequestPart("age") String age,
            @RequestPart("description") String description,
            @RequestPart("image") MultipartFile image,
            Principal principal
    ) throws IOException {

        User user = userRepository.findByEmail(principal.getName())
                .orElseThrow(() -> new RuntimeException("User not found"));

        String imagePath = "uploads/" + UUID.randomUUID() + "_" + image.getOriginalFilename();
        Path uploadPath = Paths.get("uploads");
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }
        Files.copy(image.getInputStream(), Paths.get(imagePath), StandardCopyOption.REPLACE_EXISTING);

        Pet pet = Pet.builder()
                .name(name)
                .type(type)
                .breed(breed)
                .gender(gender)
                .age(age)
                .description(description)
                .imagePath(imagePath)
                .owner(user)
                .build();

        petRepository.save(pet);

        return ResponseEntity.ok("Pet listed successfully");
    }

    @GetMapping
    public List<Pet> getAllPets() {
        return petRepository.findAll();
    }

    @GetMapping("/{id}")
    public Pet getPetById(@PathVariable Long id) {
        return petRepository.findById(id).orElseThrow();
    }
}